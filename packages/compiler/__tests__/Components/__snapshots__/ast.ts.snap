// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tokenize Function call with more { 1`] = `
"
abc(1,2,3) {{}
             ^ L0:14
             SyntaxError: Expected }"
`;

exports[`tokenize Function call without ending ) 1`] = `
"
abc(x1,1,2,3
^ L0:1
SyntaxError: Expected tokens )"
`;

exports[`tokenize Function call without ending block } 1`] = `
"
abc(1,2,3) {
           ^ L0:12
           SyntaxError: Unprocessed keyword"
`;

exports[`tokenize Unprocessed keyword 1`] = `
"
{
^ L0:1
SyntaxError: Unprocessed keyword"
`;

exports[`tokenize Unprocessed word keyword 1`] = `
"
hello
^ L0:1
SyntaxError: Unprocessed keyword"
`;

exports[`tokenize empty token list 1`] = `Array []`;

exports[`tokenize should parse functions 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [],
      "functionName": "abc",
      "parameters": Array [],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize should parse functions with block 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [],
      "functionName": "abc",
      "parameters": Array [],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize should parse functions with parameter 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [],
      "functionName": "abc",
      "parameters": Array [
        AST {
          "source": Object {
            "col": 4,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 1,
          },
          "type": "VALUE_LITERAL",
        },
      ],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize should parse functions with parameter and block 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [],
      "functionName": "abc",
      "parameters": Array [
        AST {
          "source": Object {
            "col": 4,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 1,
          },
          "type": "VALUE_LITERAL",
        },
      ],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize should parse functions with parameters 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [],
      "functionName": "abc",
      "parameters": Array [
        AST {
          "source": Object {
            "col": 4,
            "line": 0,
          },
          "tokenOptions": Object {
            "index": null,
            "name": "x1",
          },
          "type": "VARIABLE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 7,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 1,
          },
          "type": "VALUE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 9,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 2,
          },
          "type": "VALUE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 11,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 3,
          },
          "type": "VALUE_LITERAL",
        },
      ],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize should parse functions with parameters and block 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [
        AST {
          "source": Object {
            "col": 2,
            "line": 1,
          },
          "tokenOptions": Object {
            "block": Array [],
            "functionName": "abc",
            "parameters": Array [],
          },
          "type": "FUNCTION_CALL",
        },
      ],
      "functionName": "abc",
      "parameters": Array [
        AST {
          "source": Object {
            "col": 4,
            "line": 0,
          },
          "tokenOptions": Object {
            "index": null,
            "name": "x1",
          },
          "type": "VARIABLE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 7,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 1,
          },
          "type": "VALUE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 9,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 2,
          },
          "type": "VALUE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 11,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 3,
          },
          "type": "VALUE_LITERAL",
        },
      ],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize should parse functions with parameters and nested blocks 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "block": Array [
        AST {
          "source": Object {
            "col": 7,
            "line": 1,
          },
          "tokenOptions": Object {
            "block": Array [
              AST {
                "source": Object {
                  "col": 9,
                  "line": 2,
                },
                "tokenOptions": Object {
                  "block": Array [
                    AST {
                      "source": Object {
                        "col": 11,
                        "line": 3,
                      },
                      "tokenOptions": Object {
                        "block": Array [],
                        "functionName": "abc",
                        "parameters": Array [],
                      },
                      "type": "FUNCTION_CALL",
                    },
                  ],
                  "functionName": "def",
                  "parameters": Array [
                    AST {
                      "source": Object {
                        "col": 13,
                        "line": 2,
                      },
                      "tokenOptions": Object {
                        "type": "INT",
                        "value": 1,
                      },
                      "type": "VALUE_LITERAL",
                    },
                    AST {
                      "source": Object {
                        "col": 15,
                        "line": 2,
                      },
                      "tokenOptions": Object {
                        "type": "INT",
                        "value": 2,
                      },
                      "type": "VALUE_LITERAL",
                    },
                  ],
                },
                "type": "FUNCTION_CALL",
              },
            ],
            "functionName": "abc",
            "parameters": Array [],
          },
          "type": "FUNCTION_CALL",
        },
      ],
      "functionName": "abc",
      "parameters": Array [
        AST {
          "source": Object {
            "col": 4,
            "line": 0,
          },
          "tokenOptions": Object {
            "index": null,
            "name": "x1",
          },
          "type": "VARIABLE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 7,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 1,
          },
          "type": "VALUE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 9,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 2,
          },
          "type": "VALUE_LITERAL",
        },
        AST {
          "source": Object {
            "col": 11,
            "line": 0,
          },
          "tokenOptions": Object {
            "type": "INT",
            "value": 3,
          },
          "type": "VALUE_LITERAL",
        },
      ],
    },
    "type": "FUNCTION_CALL",
  },
]
`;

exports[`tokenize tokenize two variables 1`] = `
Array [
  AST {
    "source": Object {
      "col": 0,
      "line": 0,
    },
    "tokenOptions": Object {
      "type": "abc",
      "value": AST {
        "source": Object {
          "col": 8,
          "line": 0,
        },
        "tokenOptions": Object {
          "type": "INT",
          "value": 0,
        },
        "type": "VALUE_LITERAL",
      },
      "variableName": "i",
      "variableOptions": null,
    },
    "type": "DECLARATION",
  },
  AST {
    "source": Object {
      "col": 0,
      "line": 1,
    },
    "tokenOptions": Object {
      "type": "int",
      "value": AST {
        "source": Object {
          "col": 8,
          "line": 1,
        },
        "tokenOptions": Object {
          "type": "INT",
          "value": 1,
        },
        "type": "VALUE_LITERAL",
      },
      "variableName": "j",
      "variableOptions": null,
    },
    "type": "DECLARATION",
  },
]
`;
